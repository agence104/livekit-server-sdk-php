<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: livekit_egress.proto

namespace Livekit;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>livekit.S3Upload</code>
 */
class S3Upload extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string access_key = 1;</code>
     */
    protected $access_key = '';
    /**
     * Generated from protobuf field <code>string secret = 2;</code>
     */
    protected $secret = '';
    /**
     * Generated from protobuf field <code>string session_token = 11;</code>
     */
    protected $session_token = '';
    /**
     * ARN of the role to assume for file upload. Egress will make an AssumeRole API call using the provided access_key and secret to assume that role. On LiveKit cloud, this is only available on accounts that have the feature enabled
     *
     * Generated from protobuf field <code>string assume_role_arn = 12;</code>
     */
    protected $assume_role_arn = '';
    /**
     * ExternalID to use when assuming role for upload
     *
     * Generated from protobuf field <code>string assume_role_external_id = 13;</code>
     */
    protected $assume_role_external_id = '';
    /**
     * Generated from protobuf field <code>string region = 3;</code>
     */
    protected $region = '';
    /**
     * Generated from protobuf field <code>string endpoint = 4;</code>
     */
    protected $endpoint = '';
    /**
     * Generated from protobuf field <code>string bucket = 5;</code>
     */
    protected $bucket = '';
    /**
     * Generated from protobuf field <code>bool force_path_style = 6;</code>
     */
    protected $force_path_style = false;
    /**
     * Generated from protobuf field <code>map<string, string> metadata = 7;</code>
     */
    private $metadata;
    /**
     * Generated from protobuf field <code>string tagging = 8;</code>
     */
    protected $tagging = '';
    /**
     * Content-Disposition header
     *
     * Generated from protobuf field <code>string content_disposition = 9;</code>
     */
    protected $content_disposition = '';
    /**
     * Generated from protobuf field <code>.livekit.ProxyConfig proxy = 10;</code>
     */
    protected $proxy = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $access_key
     *     @type string $secret
     *     @type string $session_token
     *     @type string $assume_role_arn
     *           ARN of the role to assume for file upload. Egress will make an AssumeRole API call using the provided access_key and secret to assume that role. On LiveKit cloud, this is only available on accounts that have the feature enabled
     *     @type string $assume_role_external_id
     *           ExternalID to use when assuming role for upload
     *     @type string $region
     *     @type string $endpoint
     *     @type string $bucket
     *     @type bool $force_path_style
     *     @type array|\Google\Protobuf\Internal\MapField $metadata
     *     @type string $tagging
     *     @type string $content_disposition
     *           Content-Disposition header
     *     @type \Livekit\ProxyConfig $proxy
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\LivekitEgress::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string access_key = 1;</code>
     * @return string
     */
    public function getAccessKey()
    {
        return $this->access_key;
    }

    /**
     * Generated from protobuf field <code>string access_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setAccessKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->access_key = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string secret = 2;</code>
     * @return string
     */
    public function getSecret()
    {
        return $this->secret;
    }

    /**
     * Generated from protobuf field <code>string secret = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSecret($var)
    {
        GPBUtil::checkString($var, True);
        $this->secret = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string session_token = 11;</code>
     * @return string
     */
    public function getSessionToken()
    {
        return $this->session_token;
    }

    /**
     * Generated from protobuf field <code>string session_token = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setSessionToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->session_token = $var;

        return $this;
    }

    /**
     * ARN of the role to assume for file upload. Egress will make an AssumeRole API call using the provided access_key and secret to assume that role. On LiveKit cloud, this is only available on accounts that have the feature enabled
     *
     * Generated from protobuf field <code>string assume_role_arn = 12;</code>
     * @return string
     */
    public function getAssumeRoleArn()
    {
        return $this->assume_role_arn;
    }

    /**
     * ARN of the role to assume for file upload. Egress will make an AssumeRole API call using the provided access_key and secret to assume that role. On LiveKit cloud, this is only available on accounts that have the feature enabled
     *
     * Generated from protobuf field <code>string assume_role_arn = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setAssumeRoleArn($var)
    {
        GPBUtil::checkString($var, True);
        $this->assume_role_arn = $var;

        return $this;
    }

    /**
     * ExternalID to use when assuming role for upload
     *
     * Generated from protobuf field <code>string assume_role_external_id = 13;</code>
     * @return string
     */
    public function getAssumeRoleExternalId()
    {
        return $this->assume_role_external_id;
    }

    /**
     * ExternalID to use when assuming role for upload
     *
     * Generated from protobuf field <code>string assume_role_external_id = 13;</code>
     * @param string $var
     * @return $this
     */
    public function setAssumeRoleExternalId($var)
    {
        GPBUtil::checkString($var, True);
        $this->assume_role_external_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string region = 3;</code>
     * @return string
     */
    public function getRegion()
    {
        return $this->region;
    }

    /**
     * Generated from protobuf field <code>string region = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setRegion($var)
    {
        GPBUtil::checkString($var, True);
        $this->region = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string endpoint = 4;</code>
     * @return string
     */
    public function getEndpoint()
    {
        return $this->endpoint;
    }

    /**
     * Generated from protobuf field <code>string endpoint = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setEndpoint($var)
    {
        GPBUtil::checkString($var, True);
        $this->endpoint = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string bucket = 5;</code>
     * @return string
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Generated from protobuf field <code>string bucket = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setBucket($var)
    {
        GPBUtil::checkString($var, True);
        $this->bucket = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool force_path_style = 6;</code>
     * @return bool
     */
    public function getForcePathStyle()
    {
        return $this->force_path_style;
    }

    /**
     * Generated from protobuf field <code>bool force_path_style = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setForcePathStyle($var)
    {
        GPBUtil::checkBool($var);
        $this->force_path_style = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>map<string, string> metadata = 7;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Generated from protobuf field <code>map<string, string> metadata = 7;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->metadata = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string tagging = 8;</code>
     * @return string
     */
    public function getTagging()
    {
        return $this->tagging;
    }

    /**
     * Generated from protobuf field <code>string tagging = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setTagging($var)
    {
        GPBUtil::checkString($var, True);
        $this->tagging = $var;

        return $this;
    }

    /**
     * Content-Disposition header
     *
     * Generated from protobuf field <code>string content_disposition = 9;</code>
     * @return string
     */
    public function getContentDisposition()
    {
        return $this->content_disposition;
    }

    /**
     * Content-Disposition header
     *
     * Generated from protobuf field <code>string content_disposition = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setContentDisposition($var)
    {
        GPBUtil::checkString($var, True);
        $this->content_disposition = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.livekit.ProxyConfig proxy = 10;</code>
     * @return \Livekit\ProxyConfig|null
     */
    public function getProxy()
    {
        return $this->proxy;
    }

    public function hasProxy()
    {
        return isset($this->proxy);
    }

    public function clearProxy()
    {
        unset($this->proxy);
    }

    /**
     * Generated from protobuf field <code>.livekit.ProxyConfig proxy = 10;</code>
     * @param \Livekit\ProxyConfig $var
     * @return $this
     */
    public function setProxy($var)
    {
        GPBUtil::checkMessage($var, \Livekit\ProxyConfig::class);
        $this->proxy = $var;

        return $this;
    }

}

